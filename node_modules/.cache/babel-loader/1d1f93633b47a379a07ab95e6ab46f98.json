{"ast":null,"code":"var _jsxFileName = \"/Users/anthonybeesley/Documents/Anthony/Coding Bootcamp/course_work/project_17/src/components/MyRoutinesActivitiesForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MyRoutinesActivitiesForm = ({\n  errorMessage,\n  setErrorMessage,\n  id\n}) => {\n  _s();\n\n  const [form, setForm] = useState({\n    name: '',\n    goal: '',\n    isPublic: false\n  });\n  const [activityList, setActivityList] = useState([]);\n  const [selectedActivity, setSelectedActivity] = useState('');\n\n  const fetchData = async () => {\n    try {\n      const results = await fetchAllActivities();\n      setActivityList(results);\n    } catch (error) {\n      throw error;\n    }\n\n    ;\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const handleFormChange = event => {\n    setForm({ ...form,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const handleOptionChange = event => {\n    let isPublicValue;\n\n    if (event.target.value == 'true') {\n      isPublicValue = true;\n    } else if (event.target.value == 'false') {\n      isPublicValue = false;\n    }\n\n    setForm({ ...form,\n      isPublic: isPublicValue\n    });\n  };\n\n  const handleSelectChange = event => {\n    const selectedIndex = event.target.options.selectedIndex;\n    const activity = event.target.options[selectedIndex].getAttribute('data-key');\n    setSelectedActivity(activity);\n  };\n\n  const handleAddActivity = event => {\n    event.preventDefault();\n    const activityId = selectedActivity;\n    const routineId = routineId;\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const {\n      name,\n      goal,\n      isPublic\n    } = form;\n    await createRoutine(name, goal, isPublic);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"activities\",\n      onChange: handleSelectChange,\n      children: activityList ? activityList.map(({\n        id,\n        name\n      }) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          \"data-key\": id,\n          value: name,\n          children: name\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 28\n        }, this);\n      }) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onSubmit: handleAddActivity,\n      children: \"Add to routine\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MyRoutinesActivitiesForm, \"PgZmcZfelApnqZfFebo6FBa/Xuc=\");\n\n_c = MyRoutinesActivitiesForm;\nexport default MyRoutinesActivitiesForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyRoutinesActivitiesForm\");","map":{"version":3,"sources":["/Users/anthonybeesley/Documents/Anthony/Coding Bootcamp/course_work/project_17/src/components/MyRoutinesActivitiesForm.jsx"],"names":["React","useState","useEffect","MyRoutinesActivitiesForm","errorMessage","setErrorMessage","id","form","setForm","name","goal","isPublic","activityList","setActivityList","selectedActivity","setSelectedActivity","fetchData","results","fetchAllActivities","error","handleFormChange","event","target","value","handleOptionChange","isPublicValue","handleSelectChange","selectedIndex","options","activity","getAttribute","handleAddActivity","preventDefault","activityId","routineId","handleSubmit","createRoutine","map"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nconst MyRoutinesActivitiesForm = ({errorMessage, setErrorMessage, id}) => {\n    const [form, setForm] = useState({\n        name: '',\n        goal: '',\n        isPublic: false\n    })\n\n    const [activityList, setActivityList] = useState([]);\n\n    const [selectedActivity, setSelectedActivity] = useState('');\n\n    const fetchData = async () => {\n        try {\n            const results = await fetchAllActivities();\n            setActivityList(results);\n        } catch (error) {\n            throw error;\n        };\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, [])\n\n    const handleFormChange = (event) => {\n        setForm({...form, [event.target.name]: event.target.value});\n    }\n\n    const handleOptionChange = (event) => {\n        let isPublicValue;\n        if (event.target.value == 'true') {\n            isPublicValue = true;\n        } else if (event.target.value == 'false') {\n            isPublicValue = false;\n        }\n        setForm({...form, isPublic: isPublicValue});\n    }\n\n    const handleSelectChange = (event) => {\n        const selectedIndex = event.target.options.selectedIndex;\n        const activity = event.target.options[selectedIndex].getAttribute('data-key');\n        setSelectedActivity(activity);\n    }\n\n    const handleAddActivity = (event) => {\n        event.preventDefault();\n        const activityId = selectedActivity;\n        const routineId = routineId;\n\n    }\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        const {name, goal, isPublic} = form;\n        await createRoutine(name, goal, isPublic);\n    }\n\n    return (\n        <>\n            <select name='activities' onChange={handleSelectChange}>\n                {activityList ? activityList.map(({id, name}) => {\n                    return <option key={id} data-key={id} value={name}>{name}</option>\n                }) : null}\n            </select>\n            {errorMessage && (\n                <p className='error-message'>{errorMessage}</p>\n            )}\n            <button onSubmit={handleAddActivity}>Add to routine</button>\n        </>\n    )\n}\n\nexport default MyRoutinesActivitiesForm;"]},"metadata":{},"sourceType":"module"}