{"ast":null,"code":"var _jsxFileName = \"/Users/anthonybeesley/Documents/Anthony/Coding Bootcamp/course_work/project_17/src/components/Activities.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { fetchAllActivities, createActivity } from '../api';\nimport { checkToken } from '../auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Activities = ({\n  currentUser,\n  activityList,\n  setActivityList\n}) => {\n  _s();\n\n  const [form, setForm] = useState({\n    name: '',\n    description: ''\n  });\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const fetchData = async () => {\n    try {\n      const results = await fetchAllActivities();\n      setActivityList(results);\n    } catch (error) {\n      throw error;\n    }\n\n    ;\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const handleFormChange = event => {\n    setForm({ ...form,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  function checkActivityList(name) {\n    const activityListLowercase = activityList.map(activity => {\n      const activityName = activity.name.toLowerCase();\n      return activityName;\n    });\n    const nameLowercase = name.toLowerCase();\n    return activityListLowercase.includes(nameLowercase);\n  }\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setErrorMessage('');\n    const {\n      name,\n      description\n    } = form;\n\n    if (!name || !description) {\n      setErrorMessage('Both name and description are required!');\n      return;\n    }\n\n    if (!checkToken()) {\n      setErrorMessage('You are not logged in!');\n      return;\n    }\n\n    ;\n\n    if (checkActivityList(name)) {\n      setErrorMessage('Activity already exists!');\n      return;\n    }\n\n    try {\n      await createActivity(name, description);\n      setForm({\n        name: '',\n        description: ''\n      });\n      fetchData();\n    } catch (error) {\n      setErrorMessage(error.message);\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [currentUser.loggedIn ? /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create New Activity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Activity name: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          value: form.name,\n          onChange: handleFormChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Activity description: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"description\",\n          value: form.description,\n          onChange: handleFormChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Create activity\",\n        onClick: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"activities\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"All Activities:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), activityList.length > 0 && activityList.map(({\n        name,\n        description,\n        id\n      }) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"activity\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Activity: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"activity-name\",\n              children: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 39\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Description: \", description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this)]\n        }, id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 28\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Activities, \"AKjdb9tK9sr9g9YkONtAyXX+Xjk=\");\n\n_c = Activities;\nexport default Activities;\n\nvar _c;\n\n$RefreshReg$(_c, \"Activities\");","map":{"version":3,"sources":["/Users/anthonybeesley/Documents/Anthony/Coding Bootcamp/course_work/project_17/src/components/Activities.jsx"],"names":["React","useState","useEffect","fetchAllActivities","createActivity","checkToken","Activities","currentUser","activityList","setActivityList","form","setForm","name","description","errorMessage","setErrorMessage","fetchData","results","error","handleFormChange","event","target","value","checkActivityList","activityListLowercase","map","activity","activityName","toLowerCase","nameLowercase","includes","handleSubmit","preventDefault","message","console","loggedIn","length","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport {\n    fetchAllActivities,\n    createActivity\n} from '../api';\n\nimport {checkToken} from '../auth';\n\nconst Activities = ({currentUser, activityList, setActivityList}) => {\n    const [form, setForm] = useState({\n        name: '',\n        description: ''\n    })\n    const [errorMessage, setErrorMessage] = useState(null);\n\n    const fetchData = async () => {\n        try {\n            const results = await fetchAllActivities();\n            setActivityList(results);\n        } catch (error) {\n            throw error;\n        };\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, [])\n\n    const handleFormChange = (event) => {\n        setForm({...form, [event.target.name]: event.target.value});\n    }\n\n    function checkActivityList(name) {\n        const activityListLowercase = activityList.map((activity) => {\n            const activityName = activity.name.toLowerCase();\n            return activityName;\n        });\n        const nameLowercase = name.toLowerCase();\n        return activityListLowercase.includes(nameLowercase);\n    }\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        setErrorMessage('');\n        const {name, description} = form;\n        if (!name || !description) {\n            setErrorMessage('Both name and description are required!');\n            return;\n        }\n        if (!checkToken()) {\n            setErrorMessage('You are not logged in!');\n            return;\n        };\n        if (checkActivityList(name)) {\n            setErrorMessage('Activity already exists!');\n            return;\n        }\n        try {\n            await createActivity(name, description);\n            setForm({name: '', description: ''})\n            fetchData();\n        } catch (error) {\n            setErrorMessage(error.message)\n            console.error(error);\n        }\n    }\n\n    return (\n        <>\n            {currentUser.loggedIn ? (\n            <form>\n                <h2>Create New Activity</h2>\n                <label>\n                    <span>Activity name: </span>\n                    <input type='text' name='name' value={form.name} onChange={handleFormChange} />\n                </label>\n                <label>\n                    <span>Activity description: </span>\n                    <textarea name='description' value={form.description} onChange={handleFormChange} />\n                </label>\n                {errorMessage && (\n                    <p className='error-message'>{errorMessage}</p>\n                )}\n                <input type='submit' value='Create activity' onClick={handleSubmit} />\n            </form>\n            ) : null\n            }\n            <div id='activities'>\n                <h2>All Activities:</h2>\n                {activityList.length > 0 && activityList.map(({name, description, id}) => {\n                    return <div key={id} className='activity'>\n                        <h3>Activity: <span className='activity-name'>{name}</span></h3>\n                        <p>Description: {description}</p>\n                    </div>\n                })}\n            </div>\n        </>\n    );\n}\n\nexport default Activities;"]},"metadata":{},"sourceType":"module"}