{"ast":null,"code":"var _jsxFileName = \"/Users/anthonybeesley/Documents/Anthony/Coding Bootcamp/course_work/project_17/src/components/MyRoutinesItemEdit.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { addActivityToRoutine, updateRoutine, getRoutineActivitiesByRoutineId } from '../api';\nimport MyRoutinesActivitiesForm from './MyRoutinesActivitiesForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyRoutinesItemEdit = ({\n  fetchData,\n  pendingActivities,\n  setPendingActivities,\n  checkRoutineList,\n  setToggle,\n  toggle,\n  name,\n  goal,\n  activities,\n  isPublic,\n  id\n}) => {\n  _s();\n\n  const initialState = {\n    name: name,\n    goal: goal,\n    isPublic: isPublic\n  };\n  const [form, setForm] = useState({ ...initialState\n  });\n  const [routineActivities, setRoutineActivities] = useState(activities);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const fetchRoutineData = async () => {\n    try {\n      const routineActivities = await getRoutineActivitiesByRoutineId(id);\n      if (!routineActivities) return;\n      setRoutineActivities(routineActivities);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchRoutineData(name);\n  });\n\n  const handleFormChange = event => {\n    setForm({ ...form,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const handleOptionChange = event => {\n    let isPublicValue;\n\n    if (event.target.value == 'true') {\n      isPublicValue = true;\n    } else if (event.target.value == 'false') {\n      isPublicValue = false;\n    }\n\n    setForm({ ...form,\n      isPublic: isPublicValue\n    });\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setErrorMessage('');\n    const {\n      name,\n      goal,\n      isPublic\n    } = form;\n\n    if (checkRoutineList(name) && name !== name) {\n      setErrorMessage('This routine already exists! Please choose another name.');\n      return;\n    }\n\n    try {\n      await updateRoutine(name, goal, isPublic, id);\n\n      if (pendingActivities.length > 0) {\n        await Promise.all(pendingActivities.map(({\n          routineId,\n          activityId,\n          count,\n          duration\n        }) => {\n          addActivityToRoutine(routineId, activityId, count, duration);\n        }));\n      }\n\n      setPendingActivities([]);\n      setToggle(!toggle);\n      fetchData();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleCancel = () => {\n    setToggle(!toggle);\n    setForm({ ...initialState\n    });\n    fetchData();\n  };\n\n  const handleDelete = routineActivityId => {\n    deleteRoutineActivity(routineActivityId);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Edit Routine:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Routine name: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        value: form.name,\n        onChange: handleFormChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Routine goal: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"goal\",\n        value: form.goal,\n        onChange: handleFormChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Share your routine?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-radio\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"isPublic\",\n          value: \"false\",\n          onChange: handleOptionChange,\n          checked: form.isPublic === false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), \" Private\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"isPublic\",\n          value: \"true\",\n          onChange: handleOptionChange,\n          checked: form.isPublic === true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), \" Public\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Add activities to your routine: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MyRoutinesActivitiesForm, {\n        id: id,\n        pendingActivities: pendingActivities,\n        setPendingActivities: setPendingActivities,\n        routineActivities: routineActivities,\n        setErrorMessage: setErrorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Update routine\",\n      onClick: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \"Cancel\",\n      onClick: handleCancel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MyRoutinesItemEdit, \"UCGOaDA4dF/NE8wZgw03e5f1j18=\");\n\n_c = MyRoutinesItemEdit;\nexport default MyRoutinesItemEdit;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyRoutinesItemEdit\");","map":{"version":3,"sources":["/Users/anthonybeesley/Documents/Anthony/Coding Bootcamp/course_work/project_17/src/components/MyRoutinesItemEdit.jsx"],"names":["React","useEffect","useState","addActivityToRoutine","updateRoutine","getRoutineActivitiesByRoutineId","MyRoutinesActivitiesForm","MyRoutinesItemEdit","fetchData","pendingActivities","setPendingActivities","checkRoutineList","setToggle","toggle","name","goal","activities","isPublic","id","initialState","form","setForm","routineActivities","setRoutineActivities","errorMessage","setErrorMessage","fetchRoutineData","error","console","log","handleFormChange","event","target","value","handleOptionChange","isPublicValue","handleSubmit","preventDefault","length","Promise","all","map","routineId","activityId","count","duration","handleCancel","handleDelete","routineActivityId","deleteRoutineActivity"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\n\nimport {addActivityToRoutine, updateRoutine, getRoutineActivitiesByRoutineId} from '../api';\nimport MyRoutinesActivitiesForm from './MyRoutinesActivitiesForm';\n\nconst MyRoutinesItemEdit = ({fetchData, pendingActivities, setPendingActivities, checkRoutineList, setToggle, toggle, name, goal, activities, isPublic, id}) => {\n    const initialState = {\n        name: name,\n        goal: goal,\n        isPublic: isPublic\n    }\n\n    const [form, setForm] = useState({...initialState})\n\n    const [routineActivities, setRoutineActivities] = useState(activities);\n\n    const [errorMessage, setErrorMessage] = useState(null);\n\n    const fetchRoutineData = async () => {\n        try {\n            const routineActivities = await getRoutineActivitiesByRoutineId(id);\n            if (!routineActivities) return;\n            setRoutineActivities(routineActivities);\n        } catch (error) {\n            console.log(error);\n        }   \n    }\n\n    useEffect(() => {\n        fetchRoutineData(name);\n    })\n\n    const handleFormChange = (event) => {\n        setForm({...form, [event.target.name]: event.target.value});\n    }\n\n    const handleOptionChange = (event) => {\n        let isPublicValue;\n        if (event.target.value == 'true') {\n            isPublicValue = true;\n        } else if (event.target.value == 'false') {\n            isPublicValue = false;\n        }\n        setForm({...form, isPublic: isPublicValue});\n    }\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        setErrorMessage('');\n        const {name, goal, isPublic} = form;\n        if (checkRoutineList(name) && name !== name) {\n            setErrorMessage('This routine already exists! Please choose another name.');\n            return;\n        }\n        try {\n            await updateRoutine(name, goal, isPublic, id);\n            if (pendingActivities.length > 0) {\n                await Promise.all(\n                    pendingActivities.map(({routineId, activityId, count, duration}) => {\n                        addActivityToRoutine(routineId, activityId, count, duration);\n                    })\n                )\n            }\n            setPendingActivities([]);\n            setToggle(!toggle);\n            fetchData();  \n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const handleCancel = () => {\n        setToggle(!toggle);\n        setForm({...initialState});\n        fetchData();\n    }\n\n    const handleDelete = (routineActivityId) => {\n        deleteRoutineActivity(routineActivityId)\n    }\n\n    return (\n        <form>\n            <h3>Edit Routine:</h3>\n            <label>\n                <span>Routine name: </span>\n                <input type='text' name='name' value={form.name} onChange={handleFormChange} />\n            </label>\n            <label>\n                <span>Routine goal: </span>\n                <input type='text' name='goal' value={form.goal} onChange={handleFormChange} />\n            </label>\n            <label>\n                <span>Share your routine?</span>\n                <div className='input-radio'>\n                    <input type='radio' name='isPublic' value='false' onChange={handleOptionChange} checked={form.isPublic === false} /> Private\n                    <input type='radio' name='isPublic' value='true' onChange={handleOptionChange} checked={form.isPublic === true}  /> Public    \n                </div>\n            </label>\n            <ul>\n            {/* {routineActivities.length > 0 ? routineActivities.map(({name, activityId}) => {\n                return (\n                    <li key={activityId}>\n                        <span className='material-icons' onClick={() => handleDelete(activityId)}>delete</span> {name}\n                    </li>\n                )\n            }) : null} */}\n            </ul>\n            <label>\n                <span>Add activities to your routine: </span>\n                <MyRoutinesActivitiesForm\n                    id={id}\n                    pendingActivities={pendingActivities}\n                    setPendingActivities={setPendingActivities}\n                    routineActivities={routineActivities}\n                    setErrorMessage={setErrorMessage} />\n            </label>\n            {errorMessage && (\n            <p className='error-message'>{errorMessage}</p>\n            )}\n            <input type='submit' value='Update routine' onClick={handleSubmit} />\n            <input type='button' value='Cancel' onClick={handleCancel} />\n        </form>\n    )\n}\n\nexport default MyRoutinesItemEdit;"]},"metadata":{},"sourceType":"module"}