{"ast":null,"code":"export const BASE_URL = 'https://secret-peak-53848.herokuapp.com';\n\nfunction createHeaders() {\n  if (localStorage.getItem('token')) {\n    const token = localStorage.getItem('token');\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    };\n  } else {\n    return {\n      'Content-Type': 'application/json'\n    };\n  }\n\n  ;\n}\n\nexport async function registerUser(username, password) {\n  try {\n    const response = await fetch(`${BASE_URL}/api/users/register`, {\n      method: 'POST',\n      headers: createHeaders(),\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    });\n    const user = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message);\n    }\n\n    ;\n    localStorage.setItem('token', user.token);\n    return user;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function loginUser(username, password) {\n  try {\n    const response = await fetch(`${BASE_URL}/api/users/login`, {\n      method: 'POST',\n      headers: createHeaders(),\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message);\n    }\n\n    ;\n    localStorage.setItem('token', data.token);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function fetchAllActivities() {\n  try {\n    const response = await fetch(`${BASE_URL}/api/activities`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function createActivity(name, description) {\n  try {\n    const response = await fetch(`${BASE_URL}/api/activities`, {\n      method: 'POST',\n      headers: createHeaders(),\n      body: JSON.stringify({\n        name: name,\n        description: description\n      })\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message);\n    }\n\n    ;\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function fetchAllPublicRoutines() {\n  try {\n    const response = await fetch(`${BASE_URL}/api/routines`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function fetchRoutinesByUser(username) {\n  try {\n    const response = await fetch(`${BASE_URL}/api/routines/user/${username}`, {\n      method: 'GET',\n      headers: createHeaders()\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message);\n    }\n\n    ;\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function createRoutine(name, goal, isPublic) {\n  try {\n    const response = await fetch(`${BASE_URL}/api/routines`, {\n      method: 'POST',\n      headers: createHeaders(),\n      body: JSON.stringify({\n        name: name,\n        goal: goal,\n        isPublic: isPublic\n      })\n    });\n    const data = response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message);\n    }\n\n    ;\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function updateRoutine(fields) {\n  try {\n    const response = await fetch(`${BASE_URL}/api/routines/${id}`, {\n      method: 'PATCH',\n      headers: createHeaders(),\n      body: JSON.stringify({// KEEP ADDING\n      })\n    });\n    const data = response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function addActivityToRoutine(routineId, activityId, count, duration) {\n  try {\n    const response = await fetch(`${BASE_URL}/api/routines/${routineId}/activities`, {\n      method: 'POST',\n      headers: createHeaders(),\n      body: JSON.stringify({\n        activityId: activityId,\n        count: count,\n        duration: duration\n      })\n    });\n    const data = response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function deleteRoutine(id) {\n  try {\n    const response = await fetch(`${BASE_URL}/api/routines/${id}`, {\n      method: 'DELETE',\n      headers: createHeaders()\n    });\n    const data = response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message);\n    }\n\n    ;\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}","map":{"version":3,"sources":["/Users/anthonybeesley/Documents/Anthony/Coding Bootcamp/course_work/project_17/src/api/index.js"],"names":["BASE_URL","createHeaders","localStorage","getItem","token","registerUser","username","password","response","fetch","method","headers","body","JSON","stringify","user","json","ok","Error","data","message","setItem","error","loginUser","fetchAllActivities","createActivity","name","description","fetchAllPublicRoutines","fetchRoutinesByUser","createRoutine","goal","isPublic","updateRoutine","fields","id","addActivityToRoutine","routineId","activityId","count","duration","deleteRoutine"],"mappings":"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","sourcesContent":["export const BASE_URL = 'https://secret-peak-53848.herokuapp.com';\n\nfunction createHeaders() {\n    if (localStorage.getItem('token')) {\n        const token = localStorage.getItem('token');\n        return {\n            'Content-Type':'application/json',\n            'Authorization':`Bearer ${token}`\n        }\n    } else {\n        return {\n            'Content-Type':'application/json'\n        }; \n    };\n}\n\nexport async function registerUser(username, password) {\n    try {\n        const response = await fetch(`${BASE_URL}/api/users/register`, {\n            method: 'POST',\n            headers: createHeaders(),\n            body: JSON.stringify({\n                username: username,\n                password: password\n            })\n        });\n        const user = await response.json();\n        if (!response.ok) {\n            throw new Error(data.message);\n        };\n        localStorage.setItem('token', user.token);\n        return user;\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport async function loginUser(username, password) {\n    try {\n        const response = await fetch(`${BASE_URL}/api/users/login`, {\n            method: 'POST',\n            headers: createHeaders(),\n            body: JSON.stringify({\n                username: username,\n                password: password\n            })\n        });\n        const data = await response.json();\n        if (!response.ok) {\n            throw new Error(data.message);\n        };\n        localStorage.setItem('token', data.token);\n        return data;\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport async function fetchAllActivities() {\n    try {\n        const response = await fetch(`${BASE_URL}/api/activities`);\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport async function createActivity(name, description) {\n    try {\n        const response = await fetch(`${BASE_URL}/api/activities`, {\n            method: 'POST',\n            headers: createHeaders(),\n            body: JSON.stringify({\n                name: name,\n                description: description\n            })\n        });\n        const data = await response.json();\n        if (!response.ok) {\n            throw new Error(data.message);\n        };\n        return data;\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport async function fetchAllPublicRoutines() {\n    try {\n        const response = await fetch(`${BASE_URL}/api/routines`);\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport async function fetchRoutinesByUser(username) {\n    try {\n        const response = await fetch(`${BASE_URL}/api/routines/user/${username}`, {\n            method: 'GET',\n            headers: createHeaders()\n        });\n        const data = await response.json();\n        if (!response.ok) {\n            throw new Error(data.message);\n        };\n        return data;\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport async function createRoutine(name, goal, isPublic) {\n    try {\n        const response = await fetch(`${BASE_URL}/api/routines`, {\n            method: 'POST',\n            headers: createHeaders(),\n            body: JSON.stringify({\n                name: name,\n                goal: goal,\n                isPublic: isPublic\n            })\n        });\n        const data = response.json();\n        if (!response.ok) {\n            throw new Error(data.message);\n        };\n        return data;\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport async function updateRoutine(fields) {\n    try {\n        const response = await fetch(`${BASE_URL}/api/routines/${id}`, {\n            method: 'PATCH',\n            headers: createHeaders(),\n            body: JSON.stringify({\n                // KEEP ADDING\n            })\n        });\n        const data = response.json();\n        return data;\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport async function addActivityToRoutine(routineId, activityId, count, duration) {\n    try {\n        const response = await fetch(`${BASE_URL}/api/routines/${routineId}/activities`, {\n            method: 'POST',\n            headers: createHeaders(),\n            body: JSON.stringify({\n                activityId: activityId,\n                count: count,\n                duration: duration\n            })\n        });\n        const data = response.json();\n        return data;\n    } catch (error) {\n        throw error;\n    }\n}\n\nexport async function deleteRoutine(id) {\n    try {\n        const response = await fetch(`${BASE_URL}/api/routines/${id}`, {\n            method: 'DELETE',\n            headers: createHeaders()\n        });\n        const data = response.json();\n        if (!response.ok) {\n            throw new Error(data.message);\n        };\n        return data; \n    } catch (error) {\n        throw error;\n    }\n}"]},"metadata":{},"sourceType":"module"}