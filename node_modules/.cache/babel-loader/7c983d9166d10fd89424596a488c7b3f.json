{"ast":null,"code":"var _jsxFileName = \"/Users/anthonybeesley/Documents/Anthony/Coding Bootcamp/course_work/project_17/src/components/MyRoutinesForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { createRoutine, fetchAllActivities } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyRoutinesForm = ({\n  checkRoutineList,\n  errorMessage,\n  setErrorMessage\n}) => {\n  _s();\n\n  const [form, setForm] = useState({\n    name: '',\n    goal: '',\n    isPublic: false\n  });\n  const [activityList, setActivityList] = useState([]);\n  const [selectedActivity, setSelectedActivity] = useState('');\n\n  const fetchData = async () => {\n    try {\n      const results = await fetchAllActivities();\n      setActivityList(results);\n    } catch (error) {\n      throw error;\n    }\n\n    ;\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  console.log(activityList);\n\n  const handleFormChange = event => {\n    setForm({ ...form,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const handleOptionChange = event => {\n    let isPublicValue;\n\n    if (event.target.value == 'true') {\n      isPublicValue = true;\n    } else if (event.target.value == 'false') {\n      isPublicValue = false;\n    }\n\n    setForm({ ...form,\n      isPublic: isPublicValue\n    });\n  };\n\n  const handleSelectChange = event => {\n    const selectedIndex = event.target.options.selectedIndex;\n    const activity = event.target.options[selectedIndex].getAttribute('data-key');\n    console.log(activity);\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setErrorMessage('');\n    const {\n      name,\n      goal,\n      isPublic\n    } = form;\n\n    if (!name || !goal) {\n      setErrorMessage('Both name and goal are required!');\n      return;\n    }\n\n    if (checkRoutineList(name)) {\n      setErrorMessage('This routine already exists! Please choose another name.');\n      return;\n    }\n\n    try {\n      await createRoutine(name, goal, isPublic);\n      setForm({\n        name: '',\n        goal: '',\n        isPublic: false\n      });\n      fetchData();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create New Routine:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Routine name: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        value: form.name,\n        onChange: handleFormChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Routine goal: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"goal\",\n        value: form.goal,\n        onChange: handleFormChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Share your routine?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-radio\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"isPublic\",\n          value: \"false\",\n          onChange: handleOptionChange,\n          checked: form.isPublic === false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), \" Private\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"isPublic\",\n          value: \"true\",\n          onChange: handleOptionChange,\n          checked: form.isPublic === true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), \" Public\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Add activities to your routine: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"activities\",\n        onChange: handleSelectChange,\n        children: activityList ? activityList.map(({\n          id,\n          name\n        }) => {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            \"data-key\": id,\n            value: name,\n            children: name\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 32\n          }, this);\n        }) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Create routine\",\n      onClick: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MyRoutinesForm, \"PgZmcZfelApnqZfFebo6FBa/Xuc=\");\n\n_c = MyRoutinesForm;\nexport default MyRoutinesForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyRoutinesForm\");","map":{"version":3,"sources":["/Users/anthonybeesley/Documents/Anthony/Coding Bootcamp/course_work/project_17/src/components/MyRoutinesForm.jsx"],"names":["React","useState","useEffect","createRoutine","fetchAllActivities","MyRoutinesForm","checkRoutineList","errorMessage","setErrorMessage","form","setForm","name","goal","isPublic","activityList","setActivityList","selectedActivity","setSelectedActivity","fetchData","results","error","console","log","handleFormChange","event","target","value","handleOptionChange","isPublicValue","handleSelectChange","selectedIndex","options","activity","getAttribute","handleSubmit","preventDefault","map","id"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nimport {createRoutine, fetchAllActivities} from '../api';\n\nconst MyRoutinesForm = ({checkRoutineList, errorMessage, setErrorMessage}) => {    \n    const [form, setForm] = useState({\n        name: '',\n        goal: '',\n        isPublic: false\n    })\n\n    const [activityList, setActivityList] = useState([]);\n\n    const [selectedActivity, setSelectedActivity] = useState('');\n\n    const fetchData = async () => {\n        try {\n            const results = await fetchAllActivities();\n            setActivityList(results);\n        } catch (error) {\n            throw error;\n        };\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, [])\n\n    console.log(activityList)\n\n    const handleFormChange = (event) => {\n        setForm({...form, [event.target.name]: event.target.value});\n    }\n\n    const handleOptionChange = (event) => {\n        let isPublicValue;\n        if (event.target.value == 'true') {\n            isPublicValue = true;\n        } else if (event.target.value == 'false') {\n            isPublicValue = false;\n        }\n        setForm({...form, isPublic: isPublicValue});\n    }\n\n    const handleSelectChange = (event) => {\n        const selectedIndex = event.target.options.selectedIndex;\n        const activity = event.target.options[selectedIndex].getAttribute('data-key');\n        console.log(activity)\n    }\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        setErrorMessage('');\n        const {name, goal, isPublic} = form;\n        if (!name || !goal) {\n            setErrorMessage('Both name and goal are required!');\n            return;\n        }\n        if (checkRoutineList(name)) {\n            setErrorMessage('This routine already exists! Please choose another name.');\n            return;\n        }\n        try {\n            await createRoutine(name, goal, isPublic);\n            setForm({name: '', goal: '', isPublic: false});\n            fetchData();  \n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    return (\n        <form>\n            <h2>Create New Routine:</h2>\n            <label>\n                <span>Routine name: </span>\n                <input type='text' name='name' value={form.name} onChange={handleFormChange} />\n            </label>\n            <label>\n                <span>Routine goal: </span>\n                <input type='text' name='goal' value={form.goal} onChange={handleFormChange} />\n            </label>\n            <label>\n                <span>Share your routine?</span>\n                <div className='input-radio'>\n                    <input type='radio' name='isPublic' value='false' onChange={handleOptionChange} checked={form.isPublic === false} /> Private\n                    <input type='radio' name='isPublic' value='true' onChange={handleOptionChange} checked={form.isPublic === true} /> Public    \n                </div>\n            </label>\n            <label>\n                <span>Add activities to your routine: </span>\n                <select name='activities' onChange={handleSelectChange} >\n                    {activityList ? activityList.map(({id, name}) => {\n                        return <option key={id} data-key={id} value={name}>{name}</option>\n                    }) : null}\n                </select>\n            </label>\n            {errorMessage && (\n            <p className='error-message'>{errorMessage}</p>\n            )}\n            <input type='submit' value='Create routine' onClick={handleSubmit} />\n        </form>\n    )\n}\n\nexport default MyRoutinesForm;"]},"metadata":{},"sourceType":"module"}