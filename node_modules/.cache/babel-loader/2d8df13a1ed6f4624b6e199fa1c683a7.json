{"ast":null,"code":"var _jsxFileName = \"/Users/anthonybeesley/Documents/Anthony/Coding Bootcamp/course_work/project_17/src/components/MyRoutinesActivitiesForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { fetchAllActivities } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MyRoutinesActivitiesForm = ({\n  pendingActivities,\n  setPendingActivities,\n  errorMessage,\n  setErrorMessage,\n  id\n}) => {\n  _s();\n\n  const [activityList, setActivityList] = useState([]);\n  const [selectedActivity, setSelectedActivity] = useState({\n    routineId: id,\n    activityId: 1,\n    count: 1,\n    duration: 1\n  });\n\n  const fetchData = async () => {\n    try {\n      const results = await fetchAllActivities();\n      setActivityList(results);\n    } catch (error) {\n      throw error;\n    }\n\n    ;\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const handleSelectChange = event => {\n    const selectedIndex = event.target.options.selectedIndex;\n    const activityId = Number(event.target.options[selectedIndex].getAttribute('data-key'));\n    setSelectedActivity({ ...selectedActivity,\n      activityId: activityId\n    });\n  };\n\n  const handleNumberChange = event => {\n    setSelectedActivity({ ...selectedActivity,\n      [event.target.name]: Number(event.target.value)\n    });\n  };\n\n  const getActivityName = () => {\n    const [activity] = activityList.filter(activity => selectedActivity.activityId === activity.id);\n    return activity.name;\n  };\n\n  const pushToStateArray = (newName, newData) => {\n    const newNamesArray = pendingActivities.names.slice();\n    const newDataArray = pendingActivities.data.slice();\n    newNamesArray.push(newName);\n    newDataArray.push(newData);\n    return { ...pendingActivities,\n      names: newNamesArray,\n      data: newDataArray\n    };\n  };\n\n  const handleAddActivity = event => {\n    event.preventDefault();\n    const newObject = pushToStateArray(getActivityName(), selectedActivity);\n    setPendingActivities(newObject);\n  };\n\n  const handleDelete = index => {\n    console.log(pendingActivities[index]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"activities\",\n      onChange: handleSelectChange,\n      children: activityList ? activityList.map(({\n        id,\n        name\n      }) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          \"data-key\": id,\n          value: name,\n          children: name\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 28\n        }, this);\n      }) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Count: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"count\",\n        value: selectedActivity.count,\n        onChange: handleNumberChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Duration (minutes): \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"duration\",\n        value: selectedActivity.duration,\n        onChange: handleNumberChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddActivity,\n      children: \"Add activity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: pendingActivities.names ? pendingActivities.names.map((name, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"material-icons\",\n            onClick: () => handleDelete(index),\n            children: \"delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 29\n          }, this), \" \", name]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this);\n      }) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MyRoutinesActivitiesForm, \"U36tJuXvasSAvwoQnuwQsOu+VJg=\");\n\n_c = MyRoutinesActivitiesForm;\nexport default MyRoutinesActivitiesForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyRoutinesActivitiesForm\");","map":{"version":3,"sources":["/Users/anthonybeesley/Documents/Anthony/Coding Bootcamp/course_work/project_17/src/components/MyRoutinesActivitiesForm.jsx"],"names":["React","useState","useEffect","fetchAllActivities","MyRoutinesActivitiesForm","pendingActivities","setPendingActivities","errorMessage","setErrorMessage","id","activityList","setActivityList","selectedActivity","setSelectedActivity","routineId","activityId","count","duration","fetchData","results","error","handleSelectChange","event","selectedIndex","target","options","Number","getAttribute","handleNumberChange","name","value","getActivityName","activity","filter","pushToStateArray","newName","newData","newNamesArray","names","slice","newDataArray","data","push","handleAddActivity","preventDefault","newObject","handleDelete","index","console","log","map"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nimport {fetchAllActivities} from '../api';\n\nconst MyRoutinesActivitiesForm = ({pendingActivities, setPendingActivities, errorMessage, setErrorMessage, id}) => {\n    const [activityList, setActivityList] = useState([]);\n\n    const [selectedActivity, setSelectedActivity] = useState({\n        routineId: id,\n        activityId: 1,\n        count: 1,\n        duration: 1,\n    });\n\n    const fetchData = async () => {\n        try {\n            const results = await fetchAllActivities();\n            setActivityList(results);\n        } catch (error) {\n            throw error;\n        };\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, [])\n\n    const handleSelectChange = (event) => {\n        const selectedIndex = event.target.options.selectedIndex;\n        const activityId = Number(event.target.options[selectedIndex].getAttribute('data-key'));\n        setSelectedActivity({...selectedActivity, activityId: activityId});\n    }\n\n    const handleNumberChange = (event) => {\n        setSelectedActivity({...selectedActivity, [event.target.name]: Number(event.target.value)});\n    }\n\n    const getActivityName = () => {\n        const [activity] = activityList.filter(activity => selectedActivity.activityId === activity.id);\n        return activity.name;\n    }\n\n    const pushToStateArray = (newName, newData) => {\n        const newNamesArray = pendingActivities.names.slice();\n        const newDataArray = pendingActivities.data.slice();\n        newNamesArray.push(newName);\n        newDataArray.push(newData);\n        return {...pendingActivities, names: newNamesArray, data: newDataArray};\n    }\n\n    const handleAddActivity = (event) => {\n        event.preventDefault();\n        const newObject = pushToStateArray(getActivityName(), selectedActivity);\n        setPendingActivities(newObject);\n    }\n\n    const handleDelete = (index) => {\n        console.log(pendingActivities[index])\n    }\n\n    return (\n        <>\n            <select name='activities' onChange={handleSelectChange}>\n                {activityList ? activityList.map(({id, name}) => {\n                    return <option key={id} data-key={id} value={name}>{name}</option>\n                }) : null}\n            </select>\n            {errorMessage && (\n                <p className='error-message'>{errorMessage}</p>\n            )}\n            <label>\n                <span>Count: </span>\n                <input type='number' name='count' value={selectedActivity.count} onChange={handleNumberChange} />\n            </label>\n            <label>\n                <span>Duration (minutes): </span>\n                <input type='number' name='duration' value={selectedActivity.duration} onChange={handleNumberChange} />\n            </label>\n            <button onClick={handleAddActivity}>Add activity</button>\n            <ul>\n                {pendingActivities.names ? pendingActivities.names.map((name, index) => {\n                    return (\n                        <li key={index}>\n                            <span className='material-icons' onClick={() => handleDelete(index)}>delete</span> {name}\n                        </li>\n                    )\n                }) : null}\n            </ul>\n        </>\n    )\n}\n\nexport default MyRoutinesActivitiesForm;"]},"metadata":{},"sourceType":"module"}